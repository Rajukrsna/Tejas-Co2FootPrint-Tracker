<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leaderboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/public/leaderboard.css">
    <style>
     /* General Styles */
.transactions-container {
    margin: 20px auto;
    width: 90%;
    max-width: 600px;
    background: #f8f9fa;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.transactions-heading {
    font-size: 1.5rem;
    font-weight: bold;
    text-align: center;
    margin-bottom: 10px;
}

/* Transaction Cards */
.transaction-scroll-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-height: 300px;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: #888 transparent;
}

.transaction-card {
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
    box-shadow: 0 1px 5px rgba(0, 0, 0, 0.1);
    opacity: 0; /* Start hidden */
    transform: translateY(20px); /* Start with offset */
    animation: fadeIn 0.5s forwards; /* Smooth fade-in animation */
}

.transaction-card .card-body {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.transaction-card .card-title {
    font-weight: bold;
}

.text-success {
    color: green;
}

/* Scrollbar Customization */
.transaction-scroll-container::-webkit-scrollbar {
    width: 6px;
}

.transaction-scroll-container::-webkit-scrollbar-thumb {
    background-color: #888;
    border-radius: 4px;
}

/* Scrolling Effect */
.transaction-scroll-container.scrolling {
    overflow-y: scroll;
}

/* Fade-in Animation */
@keyframes fadeIn {
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

    </style>
</head>

<body>
    <div class="container">
        <h1 class="text-center mt-4">Leaderboard</h1>

        <!-- Confetti Animation for Top Rank -->
        <div class="confetti">
            <span style="animation-delay: 0.2s;"></span>
            <span style="animation-delay: 0.4s;"></span>
            <span style="animation-delay: 0.6s;"></span>
            <span style="animation-delay: 0.8s;"></span>
            <span style="animation-delay: 1s;"></span>
        </div>

        <table class="table table-striped animate__animated animate__fadeIn">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Username</th>
                    <th>Points</th>
                    <th>Progress</th>
                </tr>
            </thead>
            <tbody>
                <% users.forEach((use, index) => { %>
                    <tr class="<%= index === 0 ? 'animate__animated animate__flash' : '' %>">
                        <td><%= index + 1 %>
                            <span class="emoji">
                                <%= index === 0 ? 'ðŸ¥‡' : index === 1 ? 'ðŸ¥ˆ' : index === 2 ? 'ðŸ¥‰' : '' %>
                            </span>
                        </td>
                        <td><%= use.username %></td>
                        <td><%= use.points %></td>
                        <td>
                            <div class="progress-bar-container">
                                <div class="progress-bar" style="width: <%= use.points %>%; background-color: <%= use.points > 100 ? '#4CAF50' : use.points > 50 ? '#FFC107' : '#F44336' %>;"></div>
                            </div>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>

        <div class="transactions-container">
            <h3 class="transactions-heading">Recent Transactions</h3>
            <div id="transactionContainer" class="transaction-scroll-container">
                <!-- Transaction cards will be dynamically added here -->
            </div>
        </div>
        <script>
            
            let transactionCount = 0;

async function fetchTransactions() {
    try {
        const response = await fetch('photoProofRoutes/transactions'); // Replace with your API endpoint
        const transactions = await response.json();

        const transactionContainer = document.getElementById('transactionContainer');

        // Clear the container only if fetching from scratch
        if (transactionCount === 0) {
            transactionContainer.innerHTML = '';
        }

        transactions.forEach((transaction, index) => {
            if (index < transactionCount) return; // Skip already rendered transactions

            // Create transaction card
            const card = document.createElement('div');
            card.classList.add('card', 'transaction-card', 'fade-in');

            card.innerHTML = `
                <div class="card-body">
                    <h5 class="card-title">${transaction.username}</h5>
                    <p class="card-text">Points Awarded: <span class="text-success">+${transaction.pointsAwarded}</span></p>
                    <p class="card-text"><small class="text-muted">${new Date(transaction.timestamp).toLocaleString()}</small></p>
                </div>
            `;

            transactionContainer.appendChild(card);

            // Smooth scrolling effect if more than 5 cards exist
            if (transactionContainer.children.length > 5) {
                transactionContainer.classList.add('scrolling');
            }
        });

        // Update the transaction count
        transactionCount = transactions.length;
    } catch (error) {
        console.error('Error fetching transactions:', error);
    }
}

// Call fetchTransactions when the page loads
document.addEventListener('DOMContentLoaded', () => {
    fetchTransactions();
    setInterval(fetchTransactions, 5000); // Fetch new transactions every 5 seconds
    
});


    </script>
    <!-- Bootstrap JS and Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>

   
</body>

</html>
